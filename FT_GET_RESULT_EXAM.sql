CREATE FUNCTION FT_GET_RESULT_EXAM(@IDExam INT)
RETURNS TABLE  
AS  
RETURN   
(  
	SELECT COUNT(*) AS nbRightAnswer
	, TEST_SECTION.nbQuestionToDraw
	, CASE
		WHEN CAST(EXAM.score AS INT) > TEST.high_level THEN 'ACQUIS'
		WHEN CAST(EXAM.score AS INT) > TEST.low_level AND CAST(EXAM.score AS INT) < TEST.high_level THEN 'EN COURS D''ACQUISITION'
		ELSE 'NON ACQUIS' 
	  END AS result
	, TEST.label
	FROM EXAM
		LEFT JOIN TEST ON TEST.id = EXAM.id
		LEFT JOIN DRAW_QUESTION ON DRAW_QUESTION.idExam = EXAM.id
		LEFT JOIN DRAW_ANSWER ON DRAW_ANSWER.idExam = DRAW_QUESTION.idExam
		LEFT JOIN PROPOSITION ON PROPOSITION.id = DRAW_ANSWER.idProposition
		LEFT JOIN TEST_SECTION ON TEST_SECTION.idTest = TEST.id
	WHERE PROPOSITION.isTrue = 1
	AND EXAM.id = @IDExam
	GROUP BY TEST_SECTION.nbQuestionToDraw, EXAM.score, TEST.high_level, TEST.low_level, TEST.label



--SELECT *
--FROM EXAM
--	JOIN TEST ON TEST.id = EXAM.idTest
--	JOIN TEST_SECTION ON TEST_SECTION.idTest = TEST.id
--	JOIN DRAW_QUESTION ON DRAW_QUESTION.idExam = EXAM.id
--	JOIN DRAW_ANSWER ON DRAW_ANSWER.idExam = DRAW_QUESTION.idExam
--	JOIN PROPOSITION ON PROPOSITION.id = DRAW_ANSWER.idProposition
--	JOIN USERS ON USERS.id = EXAM.idUsers	
--	JOIN QUESTION ON QUESTION.id = DRAW_QUESTION.idQuestion
--WHERE EXAM.idUsers = @IDUSERS
--AND EXAM.state = 'EC'
--AND TEST_SECTION.idTheme = QUESTION.idTheme
);  